import sys,os,copy
import math
import ROOT

def print_header(fout):
    fout.write('#ifndef BTAGEFF_H\n')  
    fout.write('#define BTAGEFF_H\n')  
    fout.write('\n')
    fout.write('#include <map>\n')  
    fout.write('#include <iostream>\n')  
    fout.write('#include <TString.h>\n')  
    fout.write('\n')
    fout.write('using namespace std;\n')
    fout.write('\n')
    fout.write('map<TString,map<TString,map<TString,float>>> bTagEff_loose_c = { };\n')
    fout.write('map<TString,map<TString,map<TString,float>>> bTagEffunc_loose_c = { };\n')
    fout.write('map<TString,map<TString,map<TString,float>>> bTagEff_loose_b = { };\n')
    fout.write('map<TString,map<TString,map<TString,float>>> bTagEffunc_loose_b = { };\n')
    fout.write('map<TString,map<TString,map<TString,float>>> bTagEff_loose_udsg = { };\n')
    fout.write('map<TString,map<TString,map<TString,float>>> bTagEffunc_loose_udsg = { };\n')
    fout.write('\n')
    fout.write('map<TString,map<TString,map<TString,float>>> bTagEff_med_c = { };\n')
    fout.write('map<TString,map<TString,map<TString,float>>> bTagEffunc_med_c = { };\n')
    fout.write('map<TString,map<TString,map<TString,float>>> bTagEff_med_b = { };\n')
    fout.write('map<TString,map<TString,map<TString,float>>> bTagEffunc_med_b = { };\n')
    fout.write('map<TString,map<TString,map<TString,float>>> bTagEff_med_udsg = { };\n')
    fout.write('map<TString,map<TString,map<TString,float>>> bTagEffunc_med_udsg = { };\n')
    fout.write('\n')
    fout.write('map<TString,map<TString,map<TString,float>>> bTagEff_tight_c = { };\n')
    fout.write('map<TString,map<TString,map<TString,float>>> bTagEffunc_tight_c = { };\n')
    fout.write('map<TString,map<TString,map<TString,float>>> bTagEff_tight_b = { };\n')
    fout.write('map<TString,map<TString,map<TString,float>>> bTagEffunc_tight_b = { };\n')
    fout.write('map<TString,map<TString,map<TString,float>>> bTagEff_tight_udsg = { };\n')
    fout.write('map<TString,map<TString,map<TString,float>>> bTagEffunc_tight_udsg = { };\n')
    fout.write('\n')

def print_function_h(fout):
    fout.write('TString get_bTagEffPtBin(const float pt);\n')
    fout.write('\n')
    fout.write('TString get_bTagEffEtaBin(const float abseta);\n')
    fout.write('\n')
    fout.write('float get_bTagEff( const float pt, const float eta, const TString year, const TString WP, const int flavor, const TString variation );\n')
    fout.write('\n')
    fout.write('inline void reset_bTagEff() {\n')
    fout.write('\tbTagEff_loose_c.clear();\n')
    fout.write('\tbTagEffunc_loose_c.clear();\n')
    fout.write('\tbTagEff_loose_b.clear();\n')
    fout.write('\tbTagEffunc_loose_b.clear();\n')
    fout.write('\tbTagEff_loose_udsg.clear();\n')
    fout.write('\tbTagEffunc_loose_udsg.clear();\n')
    fout.write('\n')
    fout.write('\tbTagEff_med_c.clear();\n')
    fout.write('\tbTagEffunc_med_c.clear();\n')
    fout.write('\tbTagEff_med_b.clear();\n')
    fout.write('\tbTagEffunc_med_b.clear();\n')
    fout.write('\tbTagEff_med_udsg.clear();\n')
    fout.write('\tbTagEffunc_med_udsg.clear();\n')
    fout.write('\n')
    fout.write('\tbTagEff_tight_c.clear();\n')
    fout.write('\tbTagEffunc_tight_c.clear();\n')
    fout.write('\tbTagEff_tight_b.clear();\n')
    fout.write('\tbTagEffunc_tight_b.clear();\n')
    fout.write('\tbTagEff_tight_udsg.clear();\n')
    fout.write('\tbTagEffunc_tight_udsg.clear();\n')
    fout.write('}\n')
    fout.write('\n')

    tf = ROOT.TFile(indir+"/eff_DeepFlav_106X_2018_ttbar_2lep.root")
    th = tf.Get("h2_BTaggingEff_loose_Eff_udsg").Clone("thist")
    fout.write('constexpr int nptbins = '+str(th.GetNbinsX())+';\n')
    fout.write('constexpr int netabins = '+str(th.GetNbinsY())+';\n')
    fout.write('float *thresholds_pt = new float[nptbins];\n')
    fout.write('TString *ptbins = new TString[nptbins];\n')
    fout.write('float *thresholds_eta = new float[netabins];\n')
    fout.write('TString *etabins = new TString[netabins];\n')
    fout.write('\n')
    fout.write('inline void set_ranges() {\n')
    for b in range(1, th.GetNbinsX()+1):
        fout.write('\tthresholds_pt['+str(b-1)+'] = '+str(th.GetXaxis().GetBinLowEdge(b))+';\n')
        fout.write('\tptbins['+str(b-1)+'] = "pt'+str(b-1)+'";\n')
    fout.write('\n')
    for b in range(1, th.GetNbinsY()+1):
        fout.write('\tthresholds_eta['+str(b-1)+'] = '+str(th.GetYaxis().GetBinLowEdge(b))+';\n')
        fout.write('\tetabins['+str(b-1)+'] = "eta'+str(b-1)+'";\n')
    tf.Close()
    fout.write('}\n')
    fout.write('\n')

def print_footer(fout):
    fout.write('\n')
    fout.write('#endif\n')
    
def get_allbTagEff(fout):
    fout.write('inline void set_allbTagEff() {\n')
    fout.write('\tset_ranges();\n')
    for flavor in ["c","b","udsg"]:
      for WP in ["loose","med","tight"]:
        fout.write('\tset_bTagEff_'+WP+'_'+flavor+'();\n')
    fout.write('}\n')

def get_bTagEff(fout, WP, flavor):
    
    if not os.path.exists(outdir):
        os.makedirs(outdir)

    fout.write('inline void set_bTagEff_'+WP+'_'+flavor+'() {\n')
    for year in ["2016nonAPV","2016APV","2017","2018"]:
        tf = ROOT.TFile(indir+"/eff_DeepFlav_106X_"+year+"_ttbar_2lep.root")
        th   = tf.Get("h2_BTaggingEff_"+WP+"_Eff_"+flavor).Clone("thist")
        sfname = "bTagEff_"+WP+"_"+flavor
        uncname = "bTagEffunc_"+WP+"_"+flavor
        fout.write('\t'+sfname +'.insert({"'+year+'", { }});\n')
        fout.write('\t'+uncname+'.insert({"'+year+'", { }});\n')
        for by in range(1, th.GetNbinsY()+1):
            fout.write('\t'+sfname +'["'+year+'"].insert({"eta'+str(by-1)+'", { }});\n')
            fout.write('\t'+uncname+'["'+year+'"].insert({"eta'+str(by-1)+'", { }});\n')
            for bx in range(1, th.GetNbinsX()+1):
                tsf  = th.GetBinContent(bx, by)
                tunc = th.GetBinError  (bx, by)
                fout.write('\t'+sfname +'["'+year+'"]["eta'+str(by-1)+'"].insert({"pt'+str(bx-1)+'", '+str(tsf) +'});\n')
                fout.write('\t'+uncname+'["'+year+'"]["eta'+str(by-1)+'"].insert({"pt'+str(bx-1)+'", '+str(tunc)+'});\n')
        tf.Close()
        fout.write('\n')
    fout.write('}\n')
    fout.write('\n')

def print_cc(fout,fname):
    fout.write('#include "%s.h"\n'%fname)
    fout.write('\n')
    fout.write('TString get_bTagEffPtBin(const float pt) {\n')
    fout.write('\tfor ( unsigned int b=nptbins-2; b>=1; b-- ) { // Exclude the last pT bin due to statistics -> Use the next to last bin\n')
    fout.write('\t\tif ( pt > thresholds_pt[b] ) {\n')
    fout.write('\t\t\treturn ptbins[b];\n')
    fout.write('\t\t}\n')
    fout.write('\t}\n')
    fout.write('\treturn ptbins[0];\n')
    fout.write('}\n')
    fout.write('\n')
    fout.write('TString get_bTagEffEtaBin(const float abseta) {\n')
    fout.write('\tfor ( unsigned int b=netabins-1; b>=1; b-- ) {\n')
    fout.write('\t\tif ( abseta > thresholds_eta[b] ) {\n')
    fout.write('\t\t\treturn etabins[b];\n')
    fout.write('\t\t}\n')
    fout.write('\t}\n')
    fout.write('\treturn etabins[0];\n')
    fout.write('}\n')
    fout.write('\n')
    fout.write('float get_bTagEff( const float pt, const float eta, const TString year, const TString WP, const int flavor, const TString variation ) {\n')
    fout.write('\tif ( year!="2016nonAPV" && year!="2016APV" && year!="2017" && year!="2018" ) {\n')
    fout.write('\t\tstd::cout << "WARNING: unknown year, returning unity b-tagging efficiency!" << std::endl;\n')
    fout.write('\t\treturn 1.0;\n')
    fout.write('\t}\n')
    fout.write('\tif ( pt < 20.0 || fabs(eta) > 2.8 ) return 1.0;\n')
    fout.write('\tTString etabin = get_bTagEffEtaBin(fabs(eta));\n')
    fout.write('\tTString ptbin = get_bTagEffPtBin(pt);\n')
    fout.write('\tif ( WP == "loose" ) {\n')
    fout.write('\t\tif ( flavor == 4 ) {\n')
    fout.write('\t\t\tif ( variation == "central" ) return bTagEff_loose_c[year][etabin][ptbin];\n')
    fout.write('\t\t\telse if ( variation == "up" ) return bTagEff_loose_c[year][etabin][ptbin]+bTagEffunc_loose_c[year][etabin][ptbin];\n')
    fout.write('\t\t\telse if ( variation == "down" ) return bTagEff_loose_c[year][etabin][ptbin]-bTagEffunc_loose_c[year][etabin][ptbin];\n')
    fout.write('\t\t\telse {\n')
    fout.write('\t\t\t\tstd::cout << "WARNING: unknown variation (central, up, down), returning unity efficiency!" << std::endl;\n')
    fout.write('\t\t\t\treturn 1.0;\n')
    fout.write('\t\t\t}\n')
    fout.write('\t\t}\n')
    fout.write('\t\telse if ( flavor == 5 ) {\n')
    fout.write('\t\t\tif ( variation == "central" ) return bTagEff_loose_b[year][etabin][ptbin];\n')
    fout.write('\t\t\telse if ( variation == "up" ) return bTagEff_loose_b[year][etabin][ptbin]+bTagEffunc_loose_b[year][etabin][ptbin];\n')
    fout.write('\t\t\telse if ( variation == "down" ) return bTagEff_loose_b[year][etabin][ptbin]-bTagEffunc_loose_b[year][etabin][ptbin];\n')
    fout.write('\t\t\telse {\n')
    fout.write('\t\t\t\tstd::cout << "WARNING: unknown variation (central, up, down), returning unity efficiency!" << std::endl;\n')
    fout.write('\t\t\t\treturn 1.0;\n')
    fout.write('\t\t\t}\n')
    fout.write('\t\t}\n')
    fout.write('\t\telse if ( flavor == 0 ){\n')
    fout.write('\t\t\tif ( variation == "central" ) return bTagEff_loose_udsg[year][etabin][ptbin];\n')
    fout.write('\t\t\telse if ( variation == "up" ) return bTagEff_loose_udsg[year][etabin][ptbin]+bTagEffunc_loose_udsg[year][etabin][ptbin];\n')
    fout.write('\t\t\telse if ( variation == "down" ) return bTagEff_loose_udsg[year][etabin][ptbin]-bTagEffunc_loose_udsg[year][etabin][ptbin];\n')
    fout.write('\t\t\telse {\n')
    fout.write('\t\t\t\tstd::cout << "WARNING: unknown variation (central, up, down), returning unity efficiency!" << std::endl;\n')
    fout.write('\t\t\t\treturn 1.0;\n')
    fout.write('\t\t\t}\n')
    fout.write('\t\t}\n')
    fout.write('\t\telse {\n')
    fout.write('\t\t\tstd::cout << "WARNING: unknown flavor, up, down), returning unity efficiency!" << std::endl;\n')
    fout.write('\t\t\treturn 1.0;\n')
    fout.write('\t\t}\n')
    fout.write('\t}\n')
    fout.write('\telse if ( WP == "med" ) {\n')
    fout.write('\t\tif ( flavor == 4 ) {\n')
    fout.write('\t\t\tif ( variation == "central" ) return bTagEff_med_c[year][etabin][ptbin];\n')
    fout.write('\t\t\telse if ( variation == "up" ) return bTagEff_med_c[year][etabin][ptbin]+bTagEffunc_med_c[year][etabin][ptbin];\n')
    fout.write('\t\t\telse if ( variation == "down" ) return bTagEff_med_c[year][etabin][ptbin]-bTagEffunc_med_c[year][etabin][ptbin];\n')
    fout.write('\t\t\telse {\n')
    fout.write('\t\t\t\tstd::cout << "WARNING: unknown variation (central, up, down), returning unity efficiency!" << std::endl;\n')
    fout.write('\t\t\t\treturn 1.0;\n')
    fout.write('\t\t\t}\n')
    fout.write('\t\t}\n')
    fout.write('\t\telse if ( flavor == 5 ) {\n')
    fout.write('\t\t\tif ( variation == "central" ) return bTagEff_med_b[year][etabin][ptbin];\n')
    fout.write('\t\t\telse if ( variation == "up" ) return bTagEff_med_b[year][etabin][ptbin]+bTagEffunc_med_b[year][etabin][ptbin];\n')
    fout.write('\t\t\telse if ( variation == "down" ) return bTagEff_med_b[year][etabin][ptbin]-bTagEffunc_med_b[year][etabin][ptbin];\n')
    fout.write('\t\t\telse {\n')
    fout.write('\t\t\t\tstd::cout << "WARNING: unknown variation (central, up, down), returning unity efficiency!" << std::endl;\n')
    fout.write('\t\t\t\treturn 1.0;\n')
    fout.write('\t\t\t}\n')
    fout.write('\t\t}\n')
    fout.write('\t\telse if ( flavor == 0 ){\n')
    fout.write('\t\t\tif ( variation == "central" ) return bTagEff_med_udsg[year][etabin][ptbin];\n')
    fout.write('\t\t\telse if ( variation == "up" ) return bTagEff_med_udsg[year][etabin][ptbin]+bTagEffunc_med_udsg[year][etabin][ptbin];\n')
    fout.write('\t\t\telse if ( variation == "down" ) return bTagEff_med_udsg[year][etabin][ptbin]-bTagEffunc_med_udsg[year][etabin][ptbin];\n')
    fout.write('\t\t\telse {\n')
    fout.write('\t\t\t\tstd::cout << "WARNING: unknown variation (central, up, down), returning unity efficiency!" << std::endl;\n')
    fout.write('\t\t\t\treturn 1.0;\n')
    fout.write('\t\t\t}\n')
    fout.write('\t\t}\n')
    fout.write('\t\telse {\n')
    fout.write('\t\t\tstd::cout << "WARNING: unknown flavor, up, down), returning unity efficiency!" << std::endl;\n')
    fout.write('\t\t\treturn 1.0;\n')
    fout.write('\t\t}\n')
    fout.write('\t}\n')
    fout.write('\telse if ( WP == "tight" ) {\n')
    fout.write('\t\tif ( flavor == 4 ) {\n')
    fout.write('\t\t\tif ( variation == "central" ) return bTagEff_tight_c[year][etabin][ptbin];\n')
    fout.write('\t\t\telse if ( variation == "up" ) return bTagEff_tight_c[year][etabin][ptbin]+bTagEffunc_tight_c[year][etabin][ptbin];\n')
    fout.write('\t\t\telse if ( variation == "down" ) return bTagEff_tight_c[year][etabin][ptbin]-bTagEffunc_tight_c[year][etabin][ptbin];\n')
    fout.write('\t\t\telse {\n')
    fout.write('\t\t\t\tstd::cout << "WARNING: unknown variation (central, up, down), returning unity efficiency!" << std::endl;\n')
    fout.write('\t\t\t\treturn 1.0;\n')
    fout.write('\t\t\t}\n')
    fout.write('\t\t}\n')
    fout.write('\t\telse if ( flavor == 5 ) {\n')
    fout.write('\t\t\tif ( variation == "central" ) return bTagEff_tight_b[year][etabin][ptbin];\n')
    fout.write('\t\t\telse if ( variation == "up" ) return bTagEff_tight_b[year][etabin][ptbin]+bTagEffunc_tight_b[year][etabin][ptbin];\n')
    fout.write('\t\t\telse if ( variation == "down" ) return bTagEff_tight_b[year][etabin][ptbin]-bTagEffunc_tight_b[year][etabin][ptbin];\n')
    fout.write('\t\t\telse {\n')
    fout.write('\t\t\t\tstd::cout << "WARNING: unknown variation (central, up, down), returning unity efficiency!" << std::endl;\n')
    fout.write('\t\t\t\treturn 1.0;\n')
    fout.write('\t\t\t}\n')
    fout.write('\t\t}\n')
    fout.write('\t\telse if ( flavor == 0 ){\n')
    fout.write('\t\t\tif ( variation == "central" ) return bTagEff_tight_udsg[year][etabin][ptbin];\n')
    fout.write('\t\t\telse if ( variation == "up" ) return bTagEff_tight_udsg[year][etabin][ptbin]+bTagEffunc_tight_udsg[year][etabin][ptbin];\n')
    fout.write('\t\t\telse if ( variation == "down" ) return bTagEff_tight_udsg[year][etabin][ptbin]-bTagEffunc_tight_udsg[year][etabin][ptbin];\n')
    fout.write('\t\t\telse {\n')
    fout.write('\t\t\t\tstd::cout << "WARNING: unknown variation (central, up, down), returning unity efficiency!" << std::endl;\n')
    fout.write('\t\t\t\treturn 1.0;\n')
    fout.write('\t\t\t}\n')
    fout.write('\t\t}\n')
    fout.write('\t\telse {\n')
    fout.write('\t\t\tstd::cout << "WARNING: unknown flavor, up, down), returning unity efficiency!" << std::endl;\n')
    fout.write('\t\t\treturn 1.0;\n')
    fout.write('\t\t}\n')
    fout.write('\t}\n')
    fout.write('\telse {\n')
    fout.write('\t\tstd::cout << "WARNING: unknown WP, up, down), returning unity efficiency!" << std::endl;\n')
    fout.write('\t\treturn 1.0;\n')
    fout.write('\t}\n')
    fout.write('}\n')

indir = "./data/"
outdir="./NanoCORE/Tools/"
fname = "bTagEff"

fcc = open(outdir+"/"+fname+".cc",'w')
print_cc(fcc, fname)

fheader = open(outdir+"/"+fname+".h",'w')
print_header(fheader)
print_function_h(fheader)

for flavor in ["c","b","udsg"]:
  for WP in ["loose","med","tight"]:
    get_bTagEff(fheader, WP, flavor)

get_allbTagEff(fheader)

print_footer(fheader)

